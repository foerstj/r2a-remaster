//////////////////////////////////////////////////////////////////////////////
//
// File     :  doppelganger_manager.skrit
// Author(s):  Jason Dunlop
//
//	This manager is specialized purely for ds xp.  it sends an activation msg to a door
// 		when the rowan (the one and only doppelganger) dies
//
// Copyright © 2004 Mad Doc Software, LLC.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision: $              $Date:$
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property string			_doc$ = "Watches a newly hatched doppelganer amd reverts it when it dies.";

// @HACK
// we check the name of the dopp that is being killed to see if it is rowan
string rowanName$="Rowan the Doppelganger";
owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////


Goid doppel$;

event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if (e$ == WE_REQ_ACTIVATE)
	{
		doppel$ = msg$.GetSendFrom;

		if( !doppel$.IsValid )
		{
			report.error("Doppelganger creation failed!!");
			return;
		}
		
	//	report.genericf("Doppleganger manager: Manager activated. Doppelganger goid: 0x%x manager goid: 0x%x\n", MakeInt(doppel$), MakeInt(owner.goid));
		
		GoDb.StartWatching( owner.goid, doppel$ );
	}
}

trigger OnGoHandleCCMessage$( WE_DAMAGED )
{
	if( !doppel$.IsValid )
	{
		return;
		report.error("Doppelganger InValid!!");
	}
	
	if( doppel$.Go.Aspect.GetCurrentLife < 1.0 )
	{
		// @HACK
		// when rowan is killed we want to send an activation message to a door that should be unlocked
		string screenName$;
		doppel$.go.common.GetScreenName(screenName$);
		if( screenName$ == rowanName$)
		{
			// rowan dopp is dead.  have the door open.
			scid door_scid$ = MakeScid(0x00400054);
			SendWorldMessage( WE_REQ_ACTIVATE, doppel$.Go.Goid, door_scid$ );
		}
		
//		report.generic("Doppelganger killed!\n");
//		report.genericf("Doppleganger manager: Doppleganger died. Doppelganger goid: 0x%x manager goid: 0x%x\n", MakeInt(doppel$), MakeInt(owner.goid));

		// JCD 8/6/03
		// try to untransform the dopp in case it had cloned a transformed player
		if( doppel$.go.Actor.HasGenericState("transformed") )
		{
			#only(game)
			[[
			TransformationManager.SUnTransformMe(doppel$.Go);
			]]
		}
	
		// Make an effect point.
		GoCloneReq cloneReq$ = MakeGoCloneReq( "point" );
		// MRC 7/8/2003 Bug 1412 Need to make sure the point is available on all clients.
		cloneReq$.SetForceServerOnly(false);
		cloneReq$.SetForceClientAllowed(true);
		cloneReq$.StartingPos = doppel$.Go.Placement.Position;
		Goid point$ = GoDb.SCloneGo( cloneReq$ );
		SiegeFX.SRunScript( "doppelganger_die", point$, point$, "", point$, WE_DAMAGED );

		// MRC 7/8/ 2003 Instead of deleting the doppelganger, just make it invisible.
		// It's trying to play a death sound, and deleting it causes a problem!
		doppel$.Go.Aspect.SSetIsVisible(false);
		
		// Get the list of children of the doppelganger, and delete them.  We don't want
		// them sprayed all over the ground.
		GopColl doppelChildren$ = doppel$.Go.GetChildren();
		
		// we loop through the children
		int it$ = 0;
		int iend$ = doppelChildren$.Size();
		
		//report.genericf("Doppleganger: inventory size: %d\n", iend$);
		
		// As long as the doppelganger has children, then continue to delete them.
		while (it$ < doppelChildren$.Size() )
		{
			// Get a pointer to the child.
			Go child$ = doppelChildren$.Get(it$);
			
			// if the item is a pcontent item that the doppelganger should drop
			// don't remove it from the inventory.
			#only(game)
			[[
			if( child$.GetIsPContentInventory() == true )
			{
			//	report.genericf("Doppleganger: pcontent\n", iend$);
				it$ = it$ + 1;
				continue;
			}
			]]
			
			//report.genericf("Doppleganger: cloned\n", iend$);
			
			// MRC 7/14/2003 BUG 1854 If this child is in the inventory of the doppelganger, 
			// then remove it from the inventory.  This will also remove it as a child.
			if(doppel$.Go.Inventory.Contains(child$))
			{
				doppel$.Go.Inventory.RSRemove(child$, false);				
			}
			// Otherwise, remove the child from the doppelganger ourselves.  If it's not in
			// the inventory, then it won't get removed, and we'd have an infinite loop.
			else
			{
				doppel$.Go.RemoveChild(child$);	
			}
			
			// Then delete it
			GoDb.SMarkForDeletion(child$);
		}

		GoDb.SMarkForDeletion( owner.goid );
	}
}
